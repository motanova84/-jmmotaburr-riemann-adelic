# Makefile para ejecuci√≥n validaci√≥n, test y notebook
.PHONY: help install validate test notebook clean docker-build docker-run docs

# Variables
PYTHON := python
PIP := pip
JUPYTER := jupyter
DOCKER := docker

help: ## Mostrar esta ayuda
	@echo "Comandos disponibles para validaci√≥n simbi√≥tica ‚àû¬≥:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'

install: ## Instalar dependencias
	$(PIP) install -r requirements.txt

fetch-zeros: ## Descargar ceros de Riemann desde Odlyzko
	$(PYTHON) utils/fetch_odlyzko.py

validate: ## Ejecutar validaci√≥n num√©rica completa
	@echo "üßÆ Ejecutando validaci√≥n simbi√≥tica..."
	$(PYTHON) validate_explicit_formula.py
	@echo "‚úÖ Validaci√≥n completada"

validate-by-height: ## Validar por altura espec√≠fica (uso: make validate-by-height HEIGHT=14.134)
	$(PYTHON) validate_by_height.py $(HEIGHT)

test: ## Ejecutar tests autom√°ticos
	@echo "üß™ Ejecutando tests..."
	$(PYTHON) -m pytest tests/ -v
	@echo "‚úÖ Tests completados"

notebook: ## Iniciar Jupyter notebook
	@echo "üìì Iniciando Jupyter notebook..."
	$(JUPYTER) notebook notebooks/

notebook-run: ## Ejecutar notebook de validaci√≥n
	@echo "üèÉ Ejecutando notebook de validaci√≥n..."
	$(JUPYTER) nbconvert --to notebook --execute notebooks/validation.ipynb
	@echo "‚úÖ Notebook ejecutado"

docs: ## Generar documentaci√≥n HTML
	@echo "üìö Generando documentaci√≥n..."
	mkdir -p docs
	pandoc README.md -o docs/README.html --standalone --css=https://cdn.jsdelivr.net/gh/sindresorhus/github-markdown-css@4/github-markdown.css
	@echo "‚úÖ Documentaci√≥n generada en docs/"

docker-build: ## Construir imagen Docker
	$(DOCKER) build -t riemann-adelic:latest .

docker-run: ## Ejecutar container Docker
	$(DOCKER) run --rm -it -p 8888:8888 riemann-adelic:latest

docker-notebook: ## Ejecutar Jupyter en Docker
	$(DOCKER) run --rm -it -p 8888:8888 riemann-adelic:latest jupyter notebook --ip=0.0.0.0 --no-browser --allow-root

clean: ## Limpiar archivos temporales
	@echo "üßπ Limpiando archivos temporales..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.log" -delete
	rm -rf .pytest_cache/
	@echo "‚úÖ Limpieza completada"

all: install fetch-zeros validate test ## Ejecutar instalaci√≥n, descarga de ceros, validaci√≥n y tests

# Target para CI/CD
ci: install test validate ## Pipeline completo para integraci√≥n continua