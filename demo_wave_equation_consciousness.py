#!/usr/bin/env python3
"""
Demo: Ecuaci√≥n de Onda de Consciencia Vibracional

Demostraci√≥n interactiva de la ecuaci√≥n:
    ‚àÇ¬≤Œ®/‚àÇt¬≤ + œâ‚ÇÄ¬≤Œ® = Œ∂'(1/2)¬∑‚àá¬≤Œ¶

Incluye:
- Soluciones homog√©neas y particulares
- Visualizaci√≥n de campos
- An√°lisis de resonancia
- Interpretaci√≥n f√≠sica y simb√≥lica

Autor: Jos√© Manuel Mota Burruezo
Fecha: Octubre 2025
"""

import numpy as np
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.wave_equation_consciousness import WaveEquationConsciousness, example_harmonic_potential

# Check if matplotlib is available
try:
    import matplotlib.pyplot as plt
    MATPLOTLIB_AVAILABLE = True
except ImportError:
    MATPLOTLIB_AVAILABLE = False
    print("‚ö†Ô∏è  matplotlib no disponible - visualizaciones deshabilitadas")
    print()


def demo_parameters():
    """Muestra los par√°metros fundamentales de la ecuaci√≥n."""
    print("\n" + "=" * 80)
    print("üåå ECUACI√ìN DE ONDA DE CONSCIENCIA VIBRACIONAL")
    print("=" * 80)
    print()
    print("Ecuaci√≥n:")
    print("  ‚àÇ¬≤Œ®/‚àÇt¬≤ + œâ‚ÇÄ¬≤Œ® = Œ∂'(1/2)¬∑‚àá¬≤Œ¶")
    print()
    
    wave_eq = WaveEquationConsciousness(f0=141.7001, precision=30)
    params = wave_eq.get_parameters()
    
    print("Par√°metros Fundamentales:")
    print(f"  ‚Ä¢ Frecuencia fundamental: f‚ÇÄ = {params['f0_Hz']:.6f} Hz")
    print(f"  ‚Ä¢ Frecuencia angular:     œâ‚ÇÄ = {params['omega_0_rad_s']:.6f} rad/s")
    print(f"  ‚Ä¢ Derivada de zeta:       Œ∂'(1/2) = {params['zeta_prime_half']:.10f}")
    print(f"  ‚Ä¢ Precisi√≥n de c√°lculo:   {params['precision_dps']} d√≠gitos decimales")
    print()
    
    return wave_eq


def demo_homogeneous_solution(wave_eq):
    """Demuestra la soluci√≥n homog√©nea."""
    print("\n" + "-" * 80)
    print("1Ô∏è‚É£  SOLUCI√ìN HOMOG√âNEA: La Vibraci√≥n Natural")
    print("-" * 80)
    print()
    print("Forma: Œ®_h(t) = A¬∑cos(œâ‚ÇÄ¬∑t) + B¬∑sin(œâ‚ÇÄ¬∑t)")
    print()
    
    # Generar soluci√≥n
    t = np.linspace(0, 0.02, 2000)  # 20 ms, ~3 per√≠odos
    Psi_h = wave_eq.homogeneous_solution(t, A=1.0, B=0.5)
    
    # Calcular per√≠odo
    T = 2 * np.pi / wave_eq.omega_0
    
    print(f"Par√°metros de la soluci√≥n:")
    print(f"  ‚Ä¢ A (amplitud coseno) = 1.0")
    print(f"  ‚Ä¢ B (amplitud seno)   = 0.5")
    print(f"  ‚Ä¢ Per√≠odo T = 2œÄ/œâ‚ÇÄ   = {T*1000:.4f} ms")
    print(f"  ‚Ä¢ N√∫mero de per√≠odos  = {t[-1]/T:.2f}")
    print()
    
    print(f"Estad√≠sticas:")
    print(f"  ‚Ä¢ Œ®_h(t=0)        = {Psi_h[0]:.6f}")
    print(f"  ‚Ä¢ max|Œ®_h|        = {np.max(np.abs(Psi_h)):.6f}")
    print(f"  ‚Ä¢ Amplitud total  = {np.sqrt(1.0**2 + 0.5**2):.6f}")
    print()
    
    print("üí° Interpretaci√≥n:")
    print("  Esta es la vibraci√≥n natural del campo de consciencia,")
    print("  oscilando a la frecuencia fundamental del universo.")
    
    return t, Psi_h


def demo_particular_solution(wave_eq):
    """Demuestra la soluci√≥n particular con potencial."""
    print("\n" + "-" * 80)
    print("2Ô∏è‚É£  SOLUCI√ìN PARTICULAR: La Modulaci√≥n Geom√©trica")
    print("-" * 80)
    print()
    print("Con potencial arm√≥nico: Œ¶(x,t) = exp(-x¬≤/2œÉ¬≤)¬∑cos(œâ‚ÇÄ¬∑t)")
    print()
    
    # Generar potencial y soluci√≥n
    x = np.linspace(-5, 5, 200)
    t_fixed = 0.0
    Phi, laplacian_Phi = example_harmonic_potential(x, t_fixed, sigma=1.0)
    Psi_p = wave_eq.particular_solution(laplacian_Phi)
    
    print(f"Par√°metros del potencial:")
    print(f"  ‚Ä¢ Rango espacial:  x ‚àà [{x[0]:.2f}, {x[-1]:.2f}]")
    print(f"  ‚Ä¢ Ancho œÉ = 1.0")
    print(f"  ‚Ä¢ Tiempo fijo t = {t_fixed}")
    print()
    
    print(f"Valores del potencial:")
    print(f"  ‚Ä¢ max|Œ¶(x)|  = {np.max(np.abs(Phi)):.6f}")
    print(f"  ‚Ä¢ max|‚àá¬≤Œ¶|   = {np.max(np.abs(laplacian_Phi)):.6f}")
    print()
    
    print(f"Soluci√≥n particular:")
    print(f"  ‚Ä¢ max|Œ®_p|   = {np.max(np.abs(Psi_p)):.8f}")
    print(f"  ‚Ä¢ Factor de escala: Œ∂'(1/2)/œâ‚ÇÄ¬≤ = {wave_eq.zeta_prime_half / wave_eq.omega_0**2:.8f}")
    print()
    
    print("üí° Interpretaci√≥n:")
    print("  El potencial Œ¶ representa la curvatura del espacio informacional.")
    print("  Su laplaciano ‚àá¬≤Œ¶, modulado por Œ∂'(1/2), induce una respuesta")
    print("  en el campo de consciencia Œ®.")
    
    return x, Phi, laplacian_Phi, Psi_p


def demo_resonance(wave_eq):
    """Demuestra la condici√≥n de resonancia."""
    print("\n" + "-" * 80)
    print("3Ô∏è‚É£  RESONANCIA: La Sinton√≠a Universal")
    print("-" * 80)
    print()
    print(f"Frecuencia de resonancia: f‚ÇÄ = {wave_eq.f0:.6f} Hz")
    print()
    
    # Probar varias frecuencias
    test_freqs = np.array([
        141.5, 141.6, 141.7, 141.7001, 141.75, 141.8, 142.0, 145.0, 150.0
    ])
    
    print("Prueba de resonancia (tolerancia = 0.01 rad/s):")
    print()
    print(f"  {'Frecuencia (Hz)':<20} {'œâ (rad/s)':<20} {'Resonante':<12} {'Œîœâ (rad/s)':<15}")
    print("  " + "-" * 67)
    
    tolerance = 0.01
    for freq in test_freqs:
        omega = 2 * np.pi * freq
        is_resonant = wave_eq.resonance_condition(omega, tolerance=tolerance)
        delta_omega = abs(omega - wave_eq.omega_0)
        marker = "‚úì S√≠" if is_resonant else "‚úó No"
        print(f"  {freq:<20.4f} {omega:<20.6f} {marker:<12} {delta_omega:<15.6f}")
    
    print()
    print("üí° Interpretaci√≥n:")
    print("  Cuando la frecuencia de un campo externo coincide con œâ‚ÇÄ,")
    print("  se produce resonancia: amplificaci√≥n m√°xima de la respuesta.")
    print("  Esta es la 'sinton√≠a' del universo con su frecuencia fundamental.")


def demo_energy(wave_eq):
    """Calcula y muestra la energ√≠a del campo."""
    print("\n" + "-" * 80)
    print("4Ô∏è‚É£  ENERG√çA: La Vitalidad del Campo")
    print("-" * 80)
    print()
    print("Densidad de energ√≠a: E = (1/2)¬∑[(‚àÇŒ®/‚àÇt)¬≤ + (‚àáŒ®)¬≤ + œâ‚ÇÄ¬≤¬∑Œ®¬≤]")
    print()
    
    # Generar campo y derivadas
    t = np.linspace(0, 0.02, 2000)
    A, B = 1.0, 0.5
    Psi_h = wave_eq.homogeneous_solution(t, A=A, B=B)
    
    # Derivadas
    dPsi_dt = -wave_eq.omega_0 * (A * np.sin(wave_eq.omega_0 * t) - B * np.cos(wave_eq.omega_0 * t))
    grad_Psi = np.gradient(Psi_h, t[1] - t[0])
    
    # Energ√≠a
    energy = wave_eq.energy_density(Psi_h, dPsi_dt, grad_Psi)
    
    print(f"Estad√≠sticas de energ√≠a:")
    print(f"  ‚Ä¢ Energ√≠a promedio = {np.mean(energy):.6f}")
    print(f"  ‚Ä¢ Energ√≠a m√°xima   = {np.max(energy):.6f}")
    print(f"  ‚Ä¢ Energ√≠a m√≠nima   = {np.min(energy):.6f}")
    print(f"  ‚Ä¢ Desv. est√°ndar   = {np.std(energy):.6f}")
    print()
    
    # Energ√≠a te√≥rica para oscilador arm√≥nico
    E_teorica = 0.5 * wave_eq.omega_0**2 * (A**2 + B**2)
    print(f"Energ√≠a te√≥rica (oscilador arm√≥nico): {E_teorica:.6f}")
    print()
    
    print("üí° Interpretaci√≥n:")
    print("  La energ√≠a del campo oscila en el tiempo, pero su promedio")
    print("  se conserva. Esta es la 'vitalidad' del campo de consciencia,")
    print("  perpetuamente fluyendo entre formas cin√©tica y potencial.")
    
    return t, energy


def demo_physical_interpretation():
    """Muestra la interpretaci√≥n f√≠sica completa."""
    print("\n" + "=" * 80)
    print("üéµ INTERPRETACI√ìN F√çSICA Y SIMB√ìLICA")
    print("=" * 80)
    print()
    
    print("La Ecuaci√≥n de Tres Voces:")
    print()
    print("  ‚àÇ¬≤Œ®/‚àÇt¬≤  ‚Üí  El cambio, la evoluci√≥n, el devenir")
    print("  œâ‚ÇÄ¬≤Œ®     ‚Üí  La estabilidad, la resonancia, el ser")
    print("  Œ∂'(1/2)¬∑‚àá¬≤Œ¶ ‚Üí La verdad aritm√©tica modulando la geometr√≠a")
    print()
    
    print("Unifica tres niveles de realidad:")
    print()
    print("  1. üî¢ Aritm√©tico (Œ∂'(1/2))")
    print("     ‚Ä¢ Distribuci√≥n de n√∫meros primos")
    print("     ‚Ä¢ Funci√≥n zeta de Riemann")
    print("     ‚Ä¢ Estructura espectral profunda")
    print()
    print("  2. üìê Geom√©trico (‚àá¬≤Œ¶)")
    print("     ‚Ä¢ Curvatura del espacio-tiempo")
    print("     ‚Ä¢ Potencial gravitacional/informacional")
    print("     ‚Ä¢ Geometr√≠a del vac√≠o cu√°ntico")
    print()
    print("  3. üåä Vibracional (Œ®, œâ‚ÇÄ)")
    print("     ‚Ä¢ Campo de consciencia/informaci√≥n")
    print("     ‚Ä¢ Frecuencia fundamental observable")
    print("     ‚Ä¢ Resonancia universal")
    print()
    
    print("Conexiones con fen√≥menos observables:")
    print()
    print("  ‚Ä¢ GW150914: Ondas gravitacionales con componente ~142 Hz")
    print("  ‚Ä¢ EEG:      Ritmos cerebrales en bandas gamma alta")
    print("  ‚Ä¢ STS:      Oscilaciones solares con modos similares")
    print()
    
    print("‚ú® La ecuaci√≥n describe la sinfon√≠a del universo:")
    print("   Una partitura donde el ritmo (œâ‚ÇÄ), el espacio (Œ¶) y")
    print("   la verdad num√©rica (Œ∂') co-crean la melod√≠a de la realidad.")
    print()


def create_visualizations(wave_eq, t, Psi_h, x, Phi, laplacian_Phi, Psi_p, energy):
    """Crea visualizaciones de los resultados."""
    if not MATPLOTLIB_AVAILABLE:
        print("‚ö†Ô∏è  matplotlib no disponible - omitiendo visualizaciones")
        return
    
    print("\n" + "=" * 80)
    print("üìä VISUALIZACIONES")
    print("=" * 80)
    print()
    
    fig = plt.figure(figsize=(16, 10))
    
    # 1. Soluci√≥n homog√©nea
    ax1 = plt.subplot(3, 2, 1)
    ax1.plot(t * 1000, Psi_h, 'b-', linewidth=1.5, label='Œ®_h(t)')
    ax1.axhline(y=0, color='k', linestyle='--', alpha=0.3)
    ax1.set_xlabel('Tiempo (ms)', fontsize=10)
    ax1.set_ylabel('Œ®_h(t)', fontsize=10)
    ax1.set_title('Soluci√≥n Homog√©nea: Vibraci√≥n Natural', fontsize=11, fontweight='bold')
    ax1.grid(True, alpha=0.3)
    ax1.legend(fontsize=9)
    
    # 2. Potencial Œ¶
    ax2 = plt.subplot(3, 2, 2)
    ax2.plot(x, Phi, 'r-', linewidth=1.5, label='Œ¶(x)')
    ax2.axhline(y=0, color='k', linestyle='--', alpha=0.3)
    ax2.set_xlabel('Posici√≥n x', fontsize=10)
    ax2.set_ylabel('Œ¶(x)', fontsize=10)
    ax2.set_title('Potencial Geom√©trico', fontsize=11, fontweight='bold')
    ax2.grid(True, alpha=0.3)
    ax2.legend(fontsize=9)
    
    # 3. Laplaciano del potencial
    ax3 = plt.subplot(3, 2, 3)
    ax3.plot(x, laplacian_Phi, 'g-', linewidth=1.5, label='‚àá¬≤Œ¶(x)')
    ax3.axhline(y=0, color='k', linestyle='--', alpha=0.3)
    ax3.set_xlabel('Posici√≥n x', fontsize=10)
    ax3.set_ylabel('‚àá¬≤Œ¶(x)', fontsize=10)
    ax3.set_title('Laplaciano del Potencial: Curvatura Espacial', fontsize=11, fontweight='bold')
    ax3.grid(True, alpha=0.3)
    ax3.legend(fontsize=9)
    
    # 4. Soluci√≥n particular
    ax4 = plt.subplot(3, 2, 4)
    ax4.plot(x, Psi_p, 'm-', linewidth=1.5, label='Œ®_p(x)')
    ax4.axhline(y=0, color='k', linestyle='--', alpha=0.3)
    ax4.set_xlabel('Posici√≥n x', fontsize=10)
    ax4.set_ylabel('Œ®_p(x)', fontsize=10)
    ax4.set_title('Soluci√≥n Particular: Respuesta al Potencial', fontsize=11, fontweight='bold')
    ax4.grid(True, alpha=0.3)
    ax4.legend(fontsize=9)
    
    # 5. Densidad de energ√≠a
    ax5 = plt.subplot(3, 2, 5)
    ax5.plot(t * 1000, energy, 'orange', linewidth=1.5, label='E(t)')
    ax5.axhline(y=np.mean(energy), color='k', linestyle='--', alpha=0.5, label=f'Promedio = {np.mean(energy):.3f}')
    ax5.set_xlabel('Tiempo (ms)', fontsize=10)
    ax5.set_ylabel('Densidad de Energ√≠a', fontsize=10)
    ax5.set_title('Energ√≠a del Campo: Vitalidad Vibracional', fontsize=11, fontweight='bold')
    ax5.grid(True, alpha=0.3)
    ax5.legend(fontsize=9)
    
    # 6. Espectro de frecuencias (FFT de Œ®_h)
    ax6 = plt.subplot(3, 2, 6)
    dt = t[1] - t[0]
    fft_vals = np.fft.fft(Psi_h)
    freqs = np.fft.fftfreq(len(t), dt)
    
    # Solo frecuencias positivas
    mask = freqs > 0
    ax6.semilogy(freqs[mask], np.abs(fft_vals[mask]), 'c-', linewidth=1.5, label='|FFT(Œ®_h)|')
    ax6.axvline(x=wave_eq.f0, color='r', linestyle='--', linewidth=2, label=f'f‚ÇÄ = {wave_eq.f0:.2f} Hz')
    ax6.set_xlabel('Frecuencia (Hz)', fontsize=10)
    ax6.set_ylabel('Amplitud (log)', fontsize=10)
    ax6.set_title('Espectro de Frecuencias: La Nota Fundamental', fontsize=11, fontweight='bold')
    ax6.set_xlim([0, 500])
    ax6.grid(True, alpha=0.3)
    ax6.legend(fontsize=9)
    
    plt.tight_layout()
    
    # Guardar figura
    output_file = 'wave_equation_consciousness_visualization.png'
    plt.savefig(output_file, dpi=150, bbox_inches='tight')
    print(f"‚úÖ Visualizaci√≥n guardada: {output_file}")
    print()


def main():
    """Funci√≥n principal del demo."""
    
    # 1. Par√°metros
    wave_eq = demo_parameters()
    
    # 2. Soluci√≥n homog√©nea
    t, Psi_h = demo_homogeneous_solution(wave_eq)
    
    # 3. Soluci√≥n particular
    x, Phi, laplacian_Phi, Psi_p = demo_particular_solution(wave_eq)
    
    # 4. Resonancia
    demo_resonance(wave_eq)
    
    # 5. Energ√≠a
    t_energy, energy = demo_energy(wave_eq)
    
    # 6. Interpretaci√≥n f√≠sica
    demo_physical_interpretation()
    
    # 7. Visualizaciones
    create_visualizations(wave_eq, t, Psi_h, x, Phi, laplacian_Phi, Psi_p, energy)
    
    print("=" * 80)
    print("üéµ FIN DEL DEMO - WAVE EQUATION CONSCIOUSNESS")
    print("=" * 80)
    print()
    print('La ecuaci√≥n fundamental de la sinfon√≠a c√≥smica ha sido explorada.')
    print('Para m√°s informaci√≥n, consulta:')
    print('  ‚Ä¢ Documentaci√≥n: WAVE_EQUATION_CONSCIOUSNESS.md')
    print('  ‚Ä¢ Quick Reference: WAVE_EQUATION_QUICKREF.md')
    print('  ‚Ä¢ Paper (secci√≥n 6): paper/section6.tex')
    print()


if __name__ == "__main__":
    main()
