name: 🔬 Validate Riemann Hypothesis on Push

on:
  push:
    branches: [main, develop, copilot/*]
    paths:
      - 'validate_explicit_formula.py'
      - 'utils/mellin.py'
      - 'requirements.txt'
      - 'requirements-lock.txt'
      - '.github/workflows/validate-on-push.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  issues: write
  pull-requests: write

env:
  # Fast execution parameters for push validation
  PRIME_COUNT: 100
  ZERO_COUNT: 100
  PRIME_POWERS: 3
  INTEGRATION_T: 10
  PRECISION_DPS: 15

jobs:
  validate-formula:
    name: 🔬 Run Riemann Hypothesis Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip==24.3.1
          pip install -r requirements-lock.txt
          
      - name: 📊 Create data directory
        run: |
          mkdir -p data
          
      - name: 🔬 Run original validation formula
        run: |
          echo "🔬 Running original explicit formula validation..."
          python validate_explicit_formula.py \
            --max_primes $PRIME_COUNT \
            --max_zeros $ZERO_COUNT \
            --prime_powers $PRIME_POWERS \
            --integration_t $INTEGRATION_T \
            --precision_dps $PRECISION_DPS \
            2>&1 | tee data/validation_original.log || true
            
          # Rename results file to include formula type
          if [[ -f data/validation_results.csv ]]; then
            mv data/validation_results.csv data/validation_original_results.csv
          fi
          
      - name: 🧮 Run Weil formula validation  
        run: |
          echo "🧮 Running Weil explicit formula validation..."
          python validate_explicit_formula.py \
            --use_weil_formula \
            --max_primes $PRIME_COUNT \
            --max_zeros $ZERO_COUNT \
            --prime_powers $PRIME_POWERS \
            --integration_t $INTEGRATION_T \
            --precision_dps $PRECISION_DPS \
            2>&1 | tee data/validation_weil.log || true
            
          # Rename results file to include formula type  
          if [[ -f data/validation_results.csv ]]; then
            mv data/validation_results.csv data/validation_weil_results.csv
          fi
          
      - name: 📋 Generate summary CSV
        run: |
          echo "📊 Generating validation summary..."
          
          # Create combined results summary
          echo "timestamp,formula_type,validation_status,absolute_error,relative_error,P,K,max_zeros,precision_dps" > data/validation_summary.csv
          
          # Process original results if available
          if [[ -f data/validation_original_results.csv ]]; then
            timestamp=$(date -Iseconds)
            status=$(grep "validation_status" data/validation_original_results.csv | cut -d',' -f2 || echo "UNKNOWN")
            abs_error=$(grep "absolute_error" data/validation_original_results.csv | cut -d',' -f2 || echo "N/A")
            rel_error=$(grep "relative_error" data/validation_original_results.csv | cut -d',' -f2 || echo "N/A")
            P=$(grep "^P," data/validation_original_results.csv | cut -d',' -f2 || echo $PRIME_COUNT)
            K=$(grep "^K," data/validation_original_results.csv | cut -d',' -f2 || echo $PRIME_POWERS)
            zeros=$(grep "max_zeros" data/validation_original_results.csv | cut -d',' -f2 || echo $ZERO_COUNT)
            dps=$(grep "precision_dps" data/validation_original_results.csv | cut -d',' -f2 || echo $PRECISION_DPS)
            
            echo "$timestamp,original,$status,$abs_error,$rel_error,$P,$K,$zeros,$dps" >> data/validation_summary.csv
          fi
          
          # Process Weil results if available
          if [[ -f data/validation_weil_results.csv ]]; then
            timestamp=$(date -Iseconds)
            status=$(grep "validation_status" data/validation_weil_results.csv | cut -d',' -f2 || echo "UNKNOWN")
            abs_error=$(grep "absolute_error" data/validation_weil_results.csv | cut -d',' -f2 || echo "N/A")
            rel_error=$(grep "relative_error" data/validation_weil_results.csv | cut -d',' -f2 || echo "N/A")
            P=$(grep "^P," data/validation_weil_results.csv | cut -d',' -f2 || echo $PRIME_COUNT)
            K=$(grep "^K," data/validation_weil_results.csv | cut -d',' -f2 || echo $PRIME_POWERS)
            zeros=$(grep "max_zeros" data/validation_weil_results.csv | cut -d',' -f2 || echo $ZERO_COUNT)
            dps=$(grep "precision_dps" data/validation_weil_results.csv | cut -d',' -f2 || echo $PRECISION_DPS)
            
            echo "$timestamp,weil,$status,$abs_error,$rel_error,$P,$K,$zeros,$dps" >> data/validation_summary.csv
          fi
          
          echo "📊 Validation summary created:"
          cat data/validation_summary.csv
          
      - name: 📊 Display results
        run: |
          echo "📋 ==================================="
          echo "📋 RIEMANN HYPOTHESIS VALIDATION RESULTS"
          echo "📋 ==================================="
          
          if [[ -f data/validation_original_results.csv ]]; then
            echo ""
            echo "🔬 Original Formula Results:"
            echo "--------------------------------"
            cat data/validation_original_results.csv
          fi
          
          if [[ -f data/validation_weil_results.csv ]]; then
            echo ""
            echo "🧮 Weil Formula Results:" 
            echo "--------------------------------"
            cat data/validation_weil_results.csv
          fi
          
          echo ""
          echo "📊 Summary:"
          echo "--------------------------------"
          cat data/validation_summary.csv
          
          echo ""
          echo "📁 Generated files in /data/:"
          ls -la data/
          
      - name: 💾 Store results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-results-${{ github.run_id }}
          path: data/
          retention-days: 30
          
      - name: 📝 Add results to PR (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🔬 Riemann Hypothesis Validation Results\n\n';
            comment += `**Workflow Run:** [${context.runId}](${context.server_url}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n`;
            
            // Read and add summary if available
            try {
              const summary = fs.readFileSync('data/validation_summary.csv', 'utf8');
              comment += '### 📊 Validation Summary\n```csv\n' + summary + '\n```\n\n';
            } catch (e) {
              comment += '⚠️ Summary file not available\n\n';
            }
            
            comment += '### 📁 Generated Files\n';
            comment += '- CSV results stored in `/data/` directory\n';
            comment += '- Detailed logs available in workflow artifacts\n\n';
            comment += '*This validation runs with reduced parameters for CI efficiency.*';
            
            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Riemann Hypothesis Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }