name: Validate Riemann Formula

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Check zeros file
      run: |
        if [ ! -s "zeros/zeros_t1e8.txt" ]; then
          echo "‚ö†Ô∏è Zeros file is empty or missing"
          python utils/fetch_odlyzko.py || echo "Fetch failed, continuing with existing data"
        fi
        wc -l zeros/zeros_t1e8.txt
        
    - name: Run fast validation (test parameters)
      run: |
        python validate_notebook_style.py
        
    - name: Check validation results
      run: |
        if [ -f "data/validation_output.csv" ]; then
          echo "‚úÖ Validation results generated"
          cat data/validation_output.csv
        else
          echo "‚ùå No validation results found"
          exit 1
        fi
        
    - name: Upload validation artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: validation-results-py${{ matrix.python-version }}
        path: |
          data/validation_output.csv
          docs/validation.html
          
    - name: Check for validation failures
      run: |
        python -c "
import csv
with open('data/validation_output.csv', 'r') as f:
    reader = csv.DictReader(f)
    results = list(reader)
    
failed = [r for r in results if r['success'].lower() != 'true']
if failed:
    print('‚ùå Validation failed for functions:', [r['function'] for r in failed])
    for f in failed:
        print(f'  {f[\"function\"]}: error = {f[\"absolute_error\"]}')
    exit(1)
else:
    print('‚úÖ All validations successful')
"

  validate-production:
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[full-validation]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run production validation
      run: |
        echo "üöÄ Running full production validation..."
        timeout 1800 python validate_notebook_style.py --production || echo "Production validation timeout/failed"
        
    - name: Upload production results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: production-validation-results
        path: |
          data/validation_output.csv
          docs/validation.html