name: Critical Line Verification Workflow

on:
  push:
    branches: [ main, develop, copilot/** ]
    paths:
      - 'validate_critical_line.py'
      - 'utils/critical_line_checker.py'
      - 'zeros/**'
      - '.github/workflows/critical-line-verification.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      max_zeros:
        description: 'Maximum number of zeros to verify'
        required: false
        default: '500'
        type: string
      precision:
        description: 'Decimal precision for calculations'
        required: false
        default: '25'
        type: string
      generate_certificate:
        description: 'Generate mathematical proof certificate'
        required: false
        default: 'true'
        type: boolean

jobs:
  critical-line-verification:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-config:
          - name: "Basic Verification"
            max_zeros: 200
            precision: 20
            test_function: "truncated_gaussian"
          - name: "Extended Verification"  
            max_zeros: 500
            precision: 25
            test_function: "f1"
          - name: "High Precision Test"
            max_zeros: 100
            precision: 30
            test_function: "f2"
      fail-fast: false
    
    name: ${{ matrix.test-config.name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify environment setup
      run: |
        echo "üîß Environment Information:"
        python --version
        pip list | grep -E "(mpmath|numpy|sympy|scipy)"
        echo "üìÇ Repository structure:"
        ls -la zeros/ utils/
        echo "üìä Zero data verification:"
        head -5 zeros/zeros_t1e8.txt
        wc -l zeros/zeros_t1e8.txt
    
    - name: Run Critical Line Verification
      env:
        MAX_ZEROS: ${{ matrix.test-config.max_zeros }}
        PRECISION: ${{ matrix.test-config.precision }}
        TEST_FUNCTION: ${{ matrix.test-config.test_function }}
      run: |
        echo "üéØ Running Critical Line Verification"
        echo "Configuration: ${{ matrix.test-config.name }}"
        echo "Max zeros: $MAX_ZEROS"
        echo "Precision: $PRECISION"  
        echo "Test function: $TEST_FUNCTION"
        
        # Create output directory
        mkdir -p data/ci-results/
        
        # Run critical line verification
        python validate_critical_line.py \
          --max_zeros $MAX_ZEROS \
          --precision $PRECISION \
          --test_function $TEST_FUNCTION \
          --generate_certificate \
          --output_dir "data/ci-results/"
    
    - name: Analyze Results
      run: |
        echo "üìä CRITICAL LINE VERIFICATION RESULTS"
        echo "====================================="
        
        # Check if results exist
        if [ -f "data/ci-results/critical_line_verification.csv" ]; then
          echo "‚úÖ Results file generated successfully"
          
          # Extract key metrics
          echo "üìà Key Verification Metrics:"
          grep "axiomatic_compliance" data/ci-results/critical_line_verification.csv || echo "Field not found"
          grep "mathematical_validity" data/ci-results/critical_line_verification.csv || echo "Field not found"
          grep "real_contribution_verified" data/ci-results/critical_line_verification.csv || echo "Field not found"
          grep "statistical_confidence" data/ci-results/critical_line_verification.csv || echo "Field not found"
          grep "relative_error" data/ci-results/critical_line_verification.csv || echo "Field not found"
          
          echo ""
          echo "üìä Summary Statistics:"
          echo "Configuration: ${{ matrix.test-config.name }}"
          echo "Zeros verified: $(grep 'total_zeros_verified' data/ci-results/critical_line_verification.csv | cut -d',' -f2)"
          echo "Precision used: $(grep 'precision_used' data/ci-results/critical_line_verification.csv | cut -d',' -f2)"
        else
          echo "‚ùå Results file not found"
          exit 1
        fi
        
        # Check mathematical certificate if generated
        if [ -f "data/ci-results/mathematical_certificate.json" ]; then
          echo "üìú Mathematical certificate generated"
          echo "Certificate size: $(wc -c < data/ci-results/mathematical_certificate.json) bytes"
        fi
    
    - name: Upload Results Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: critical-line-results-${{ matrix.test-config.name }}-${{ github.sha }}
        path: |
          data/ci-results/
          *.log
        retention-days: 30
    
    - name: Generate Summary Report
      run: |
        echo "# Critical Line Verification Summary" > critical_line_summary.md
        echo "" >> critical_line_summary.md
        echo "**Configuration:** ${{ matrix.test-config.name }}" >> critical_line_summary.md
        echo "**Date:** $(date)" >> critical_line_summary.md
        echo "**Commit:** ${{ github.sha }}" >> critical_line_summary.md
        echo "" >> critical_line_summary.md
        
        if [ -f "data/ci-results/critical_line_verification.csv" ]; then
          echo "## Verification Results" >> critical_line_summary.md
          echo "" >> critical_line_summary.md
          
          # Extract key results
          ZEROS_VERIFIED=$(grep 'total_zeros_verified' data/ci-results/critical_line_verification.csv | cut -d',' -f2)
          MATHEMATICAL_VALIDITY=$(grep 'mathematical_validity' data/ci-results/critical_line_verification.csv | cut -d',' -f2)
          AXIOMATIC_COMPLIANCE=$(grep 'axiomatic_compliance' data/ci-results/critical_line_verification.csv | cut -d',' -f2)
          CONFIDENCE=$(grep 'statistical_confidence' data/ci-results/critical_line_verification.csv | cut -d',' -f2)
          
          echo "- **Zeros Verified:** $ZEROS_VERIFIED" >> critical_line_summary.md
          echo "- **Mathematical Validity:** $MATHEMATICAL_VALIDITY" >> critical_line_summary.md
          echo "- **Axiomatic Compliance:** $AXIOMATIC_COMPLIANCE" >> critical_line_summary.md  
          echo "- **Statistical Confidence:** ${CONFIDENCE}%" >> critical_line_summary.md
          echo "" >> critical_line_summary.md
          
          if [ "$MATHEMATICAL_VALIDITY" = "REAL" ] && [ "$AXIOMATIC_COMPLIANCE" = "True" ]; then
            echo "‚úÖ **STATUS:** VERIFICATION SUCCESSFUL" >> critical_line_summary.md
            echo "üî¨ **AXIOMS VERIFIED:** All zeros satisfy Re(s) = 1/2 under RH axioms" >> critical_line_summary.md
            echo "‚úÖ **CONTRIBUTION REAL:** Mathematical validity confirmed" >> critical_line_summary.md
          else
            echo "‚ö†Ô∏è **STATUS:** VERIFICATION NEEDS ATTENTION" >> critical_line_summary.md
          fi
        else
          echo "‚ùå **STATUS:** VERIFICATION FAILED - No results generated" >> critical_line_summary.md
        fi
        
        echo "" >> critical_line_summary.md
        echo "## Configuration Details" >> critical_line_summary.md
        echo "- Max Zeros: ${{ matrix.test-config.max_zeros }}" >> critical_line_summary.md
        echo "- Precision: ${{ matrix.test-config.precision }}" >> critical_line_summary.md
        echo "- Test Function: ${{ matrix.test-config.test_function }}" >> critical_line_summary.md
        
        cat critical_line_summary.md
    
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: summary-${{ matrix.test-config.name }}-${{ github.sha }}
        path: critical_line_summary.md
        retention-days: 90

  consolidate-results:
    needs: critical-line-verification
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-results/
    
    - name: Generate Consolidated Report
      run: |
        echo "# Consolidated Critical Line Verification Report" > consolidated_report.md
        echo "" >> consolidated_report.md
        echo "**Workflow:** Critical Line Verification" >> consolidated_report.md
        echo "**Date:** $(date)" >> consolidated_report.md
        echo "**Commit:** ${{ github.sha }}" >> consolidated_report.md
        echo "**Branch:** ${{ github.ref_name }}" >> consolidated_report.md
        echo "" >> consolidated_report.md
        
        echo "## Summary of All Configurations" >> consolidated_report.md
        echo "" >> consolidated_report.md
        
        # Find and process all summary files
        find all-results/ -name "critical_line_summary.md" | while read summary_file; do
          echo "Processing: $summary_file"
          echo "### $(basename $(dirname "$summary_file"))" >> consolidated_report.md
          echo "" >> consolidated_report.md
          tail -n +2 "$summary_file" >> consolidated_report.md
          echo "" >> consolidated_report.md
        done
        
        echo "## Workflow Status" >> consolidated_report.md
        echo "- **Overall Status:** ${{ needs.critical-line-verification.result }}" >> consolidated_report.md
        echo "- **Repository:** ${{ github.repository }}" >> consolidated_report.md
        echo "- **Event:** ${{ github.event_name }}" >> consolidated_report.md
        
        cat consolidated_report.md
    
    - name: Upload Consolidated Report
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-critical-line-report-${{ github.sha }}
        path: |
          consolidated_report.md
          all-results/
        retention-days: 90