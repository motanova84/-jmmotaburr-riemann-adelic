# Release: construye artefacto y crea GitHub Release en push de tag v*
# Este workflow se ejecuta cuando se crea un tag de versión
name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine

      - name: Run tests before release
        run: |
          pip install pytest pytest-cov
          pytest tests/ -v

      - name: Build distribution packages
        run: |
          # Crear archivos de distribución si es necesario
          tar -czf riemann-adelic-${{ github.ref_name }}.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            --exclude='.pytest_cache' \
            --exclude='*.png' \
            --exclude='logs' \
            .

      - name: Generate release notes
        id: release_notes
        run: |
          # Extraer notas de CHANGELOG.md si existe
          if [ -f CHANGELOG.md ]; then
            awk '/^## \['"${GITHUB_REF_NAME#v}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md || echo "Release ${GITHUB_REF_NAME}" > release_notes.md
          else
            echo "Release ${GITHUB_REF_NAME}" > release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            riemann-adelic-*.tar.gz
            RIEMANNJMMB84.pdf
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Opcional: publicar en PyPI (requiere PYPI_TOKEN en secrets)
      # - name: Publish to PyPI
      #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #   run: |
      #     python -m build
      #     twine upload dist/*
