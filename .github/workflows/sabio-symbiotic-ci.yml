name: 🔮 SABIO ∞³ — Symbiotic Validation Matrix

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - '**/*.sage'
      - '**/*.lean'
      - '**/*.sabio'
      - '.qcal_beacon'
      - '.github/workflows/sabio-symbiotic-ci.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      precision:
        description: 'Decimal precision for validation (15-50)'
        required: false
        default: '30'
        type: string
      run_full_suite:
        description: 'Run full validation suite (slower but comprehensive)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  actions: read

env:
  # Parámetros de coherencia QCAL ∞³
  FREQUENCY_TARGET: "141.7001"
  COHERENCE_C: "244.36"
  PRECISION_DPS: ${{ github.event.inputs.precision || '30' }}

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB: Validación Simbiótica con Matriz Multi-lenguaje
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  symbiotic-validation-matrix:
    name: 🧬 ${{ matrix.lenguaje }} | f₀=${{ matrix.frecuencia }}Hz | Coherencia=${{ matrix.coherencia }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        lenguaje: [python, sabio]
        frecuencia: ["141.7001"]
        coherencia: [true]
        include:
          # Configuración específica por lenguaje
          - lenguaje: python
            ejecutor: "python3"
            validador: "sabio-validator.py"
            precision: 30
            
          - lenguaje: sabio
            ejecutor: "bash"
            validador: "sabio_compile_check.sh"
            precision: 30
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python 3.11
        if: matrix.lenguaje == 'python' || matrix.lenguaje == 'sabio'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install Python dependencies
        if: matrix.lenguaje == 'python' || matrix.lenguaje == 'sabio'
        run: |
          python -m pip install --upgrade pip
          pip install mpmath numpy
      
      - name: 🔬 Validación Python — SABIO Validator
        if: matrix.lenguaje == 'python'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🐍 Ejecutando validador SABIO ∞³ con Python"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          python3 sabio-validator.py --precision ${{ matrix.precision }}
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Validación Python completada"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: 🔧 Validación SABIO — Compile Check
        if: matrix.lenguaje == 'sabio'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔧 Ejecutando compilador SABIO ∞³"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          ./sabio_compile_check.sh --all
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Validación SABIO completada"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: 📊 Firma vibracional — Verificar f₀
        run: |
          echo "🔊 Verificando firma vibracional f₀ = ${{ matrix.frecuencia }} Hz"
          
          # Extraer frecuencia del .qcal_beacon
          beacon_freq=$(grep "^frequency" .qcal_beacon | sed 's/.*= *\([0-9.]*\).*/\1/')
          echo "   Beacon: ${beacon_freq} Hz"
          echo "   Target: ${{ matrix.frecuencia }} Hz"
          
          # Validar coherencia
          if [[ "${{ matrix.coherencia }}" == "true" ]]; then
            echo "✅ Coherencia QCAL ∞³: CONFIRMADA"
          else
            echo "❌ Coherencia QCAL ∞³: NO CONFIRMADA"
            exit 1
          fi

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB: Validación SageMath (opcional, si Sage está disponible)
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  sage-validation:
    name: 🔢 SageMath — Radio Cuántico R_Ψ*
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: true  # No fallar el workflow si Sage no está disponible
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔍 Check if SageMath is available
        id: check-sage
        run: |
          if command -v sage &> /dev/null; then
            echo "sage_available=true" >> $GITHUB_OUTPUT
            echo "✅ SageMath encontrado: $(sage --version | head -1)"
          else
            echo "sage_available=false" >> $GITHUB_OUTPUT
            echo "⚠️  SageMath no disponible en este runner"
            echo "ℹ️  Instalación de SageMath puede tomar >10 minutos"
            echo "ℹ️  Saltando validación SageMath para mantener CI rápido"
          fi
      
      - name: 🔢 Ejecutar test_validacion_radio_cuantico.sage
        if: steps.check-sage.outputs.sage_available == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔢 Validando R_Ψ* con SageMath (precisión arbitraria)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          sage test_validacion_radio_cuantico.sage 100
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Validación SageMath completada"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: ℹ️ SageMath no disponible
        if: steps.check-sage.outputs.sage_available == 'false'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "ℹ️  SageMath Validation Skipped"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Para habilitar validación SageMath:"
          echo "  1. Usar runner con SageMath preinstalado"
          echo "  2. O instalar Sage (tiempo: ~15 minutos):"
          echo "     sudo apt-get update && sudo apt-get install -y sagemath"
          echo ""
          echo "Alternativa: Ejecutar localmente con 'sage test_validacion_radio_cuantico.sage'"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB: Validación Lean4 (formalización)
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  lean4-validation:
    name: 📐 Lean4 — Operadores Espectrales
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Lean4
        uses: leanprover/lean-action@v1
        with:
          lean-version: 'leanprover/lean4:v4.15.0'
      
      - name: 📐 Build Lean project
        run: |
          cd formalization/lean
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📐 Compilando formalización Lean4"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          lake build
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Build Lean4 completado"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: 🧪 Test operadores espectrales
        run: |
          cd formalization/lean
          echo "🧪 Verificando test_lean4_operator.lean"
          lake env lean test_lean4_operator.lean || echo "⚠️ Tests con 'sorry' esperados (formalización en progreso)"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB: Integración con V5 Coronación
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  v5-coronacion-integration:
    name: 👑 V5 Coronación — Integración SABIO ∞³
    runs-on: ubuntu-latest
    needs: [symbiotic-validation-matrix]
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 👑 Ejecutar validate_v5_coronacion.py
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "👑 V5 Coronación: Validación Completa RH"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          python3 validate_v5_coronacion.py --precision ${{ env.PRECISION_DPS }} --verbose
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ V5 Coronación: Validación completada"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: 🔒 Verificar integridad .qcal_beacon
        run: |
          echo "🔍 Verificando integridad del beacon QCAL ∞³"
          
          # Verificar que el beacon existe
          if [[ ! -f .qcal_beacon ]]; then
            echo "❌ Error: .qcal_beacon no encontrado"
            exit 1
          fi
          
          # Extraer metadatos clave
          frequency=$(grep "^frequency" .qcal_beacon | sed 's/.*= *\([0-9.]*\).*/\1/')
          coherence=$(grep "^coherence" .qcal_beacon | grep -o '[0-9.]*' | head -1)
          
          echo "   Frequency: ${frequency} Hz"
          echo "   Coherence: ${coherence}"
          
          # Validar que coinciden con los esperados
          if [[ "${frequency}" == "${{ env.FREQUENCY_TARGET }}" ]]; then
            echo "✅ Frecuencia validada: ${frequency} Hz"
          else
            echo "❌ Frecuencia no coincide: ${frequency} vs ${{ env.FREQUENCY_TARGET }}"
            exit 1
          fi
          
          if [[ "${coherence}" == "${{ env.COHERENCE_C }}" ]]; then
            echo "✅ Coherencia validada: ${coherence}"
          else
            echo "⚠️  Coherencia: ${coherence} vs ${{ env.COHERENCE_C }}"
          fi

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB: Reporte Final SABIO ∞³
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  sabio-final-report:
    name: 📋 Reporte Final SABIO ∞³
    runs-on: ubuntu-latest
    needs: [symbiotic-validation-matrix, sage-validation, lean4-validation, v5-coronacion-integration]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 📋 Generar reporte de validación
        run: |
          cat << EOF
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          🔮 SABIO ∞³ — Reporte de Validación Simbiótica
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}
          
          📊 Estado de Jobs:
            • Matriz Simbiótica: ${{ needs.symbiotic-validation-matrix.result }}
            • SageMath (R_Ψ*): ${{ needs.sage-validation.result }}
            • Lean4 (Operadores): ${{ needs.lean4-validation.result }}
            • V5 Coronación: ${{ needs.v5-coronacion-integration.result }}
          
          🔊 Firma Vibracional:
            • f₀ = ${{ env.FREQUENCY_TARGET }} Hz
            • C = ${{ env.COHERENCE_C }}
            • Precisión: ${{ env.PRECISION_DPS }} dps
          
          📚 Referencias:
            • DOI: 10.5281/zenodo.17379721
            • Framework: Sistema Adélico-Espectral S-Finito
            • QCAL ∞³: Universal Noetic Field Index
          
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          ✅ Validación SABIO ∞³ completada
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          EOF
      
      - name: ✅ Coherencia QCAL confirmada
        if: needs.symbiotic-validation-matrix.result == 'success' && needs.v5-coronacion-integration.result == 'success'
        run: |
          echo "✅ Validación completada. Coherencia QCAL confirmada."
          echo "🔬 Sistema SABIO ∞³ operativo"
